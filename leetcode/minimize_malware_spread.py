from collections import defaultdict


class Solution:

    def minMalwareSpread(self, graph, initial):
        return self._min_malware(graph, initial)

    def _min_malware(self, graph, initial):
        visited = set()
        con_number = 0
        initial_to_comp_map = {}
        comp_to_initial_map = defaultdict(set)
        comps = {}
        for node in initial:
            if node in visited:
                temp = self.get_comp_num(node, comps)
                initial_to_comp_map[node] = temp
                comp_to_initial_map[temp].add(node)
            else:
                nodes = self.get_con_component(graph, node)
                visited = visited.union(nodes)
                comps[con_number] = nodes
                initial_to_comp_map[node] = con_number
                comp_to_initial_map[con_number].add(node)
                con_number += 1
        print(comps)
        max_size = 1
        initial.sort()
        result = initial[0]
        for comp in comps:
            if len(comps[comp]) > max_size and len(comp_to_initial_map[comp]) == 1:
                max_size = len(comps[comp])
                result = comp_to_initial_map[comp].pop()
        return result

    def get_comp_num(self, node, comps):
        for num, comp in comps.items():
            if node in comp:
                return num

    def get_con_component(self, graph, node):
        stack = {node}
        nodes = {node}
        while stack:
            current = stack.pop()
            neighbors = self.get_neighbors(graph, current)
            stack = stack.union(neighbors.difference(nodes))
            nodes = nodes.union(neighbors)
        return nodes

    def get_neighbors(self, graph, node):
        return set([ind for ind, x in enumerate(graph[node])
                    if x == 1 and ind != node])


if __name__ == '__main__':
    tests = [
        # ([[1, 1, 0], [1, 1, 0], [0, 0, 1]], [0, 1]),
        # ([[1, 0, 0], [0, 1, 0], [0, 0, 1]], [0, 2]),
        # ([[1, 1, 1], [1, 1, 1], [1, 1, 1]], [1, 2]),
        # ([[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 1], [0, 0, 1, 1]], [3, 1]),
        ([[1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 1, 0], [0, 0, 0, 1, 1, 0],
         [0, 0, 0, 0, 0, 1]], [5, 0]),
    ]
    s = Solution()
    for g, i in tests:
        print(s.minMalwareSpread(g, i))
